Go
(Otra) Introducción
29 Sep 2016

Carles Aragón
Oriol Flors

* Porqué Go?
.link https://www.youtube.com/watch?v=uQgWP7zM6mU Another Golang at Language Design, Rob Pike

Problemas con los lenguajes _mainstream_ (C++, Java...)

- Tiempos de compilación excesivos
(el desarrollo de Go se inicia durante una pausa de 45 minutos para compilar un programa de C++ en los clústeres de compilación de Google)

- Verbosos

  foo::Foo *myFoo = new foo::Foo(foo::FOO_INIT)
  
- Antiguos, no se adaptan al nuevo _hardware_



* Porqué Go?

Problemas con los nuevos lenguajes _dinámicos_ (Python, Ruby...)

- Falta de _static_typing_
- Menor eficiencia
- Siguen sin adaptarse al nuevo _hardware_



* Porqué Go?

Otros problemas

- Confusión entre dinámico-fácil, estático-difícil
- Demasiadas _features_ y sofisticación
- Difícil trabajar en proyectos de millones de líneas



* Qué pretende Go?
.link https://talks.golang.org/2014/gocon-tokyo.slide Go: 90% Perfect, 100% of the time, Brad Fitzpatrick

- Quedarse con lo bueno de cada mundo: _static_typing_ pero lenguaje conciso, compilado (eficiente)
- Evitar lo negativo: tiempos de compilación reducidos
- Adaptarse a grandes proyectos y hardware moderno: soporte para concurrencia, lenguaje simple con características _ortogonales_



* Qué pretende Go?

.image images/languages_comparison.png 500 _



* Qué es Go?

_Go_is_a_strongly,_statically_typed,_compiled_language_with_builtin_support_for_concurrency_

Diseñado inicialmente por consenso entre los creadores: Ken Thompson, Robert Griesemer i Rob Pike

Pretende evitar el camino de otros lenguajes, que añaden características de otros, añadiendo complejidad y evolucionando hacia ser el mismo lenguaje con distinta sintaxis



* Go es un lenguaje simple
.link https://www.youtube.com/watch?v=rFejpH_tAHM Simplicity is Complicated, Rob Pike

- Gorutinas
- Constantes
- Interfaces
- Paquetes
- Recolector de basura



* Garbage Collector

.image images/gc1.png



* Garbage Collector 2

.image images/gc2.png 500 _



* Go proverbs
.link https://www.youtube.com/watch?v=PAAkCSZUG1c&list=PLXwUmDicO5FhvkJWPO3y8oMIyWdpbie2A&index=5 Go Proverbs, Rob Pike

- Don't communicate by sharing memory, share memory by communicating.
- Concurrency is not parallelism.
- The bigger the interface, the weaker the abstraction.
- Make the zero value useful.
- Gofmt's style is no one's favorite, yet gofmt is everyone's favorite.
- A little copying is better than a little dependency.
- Clear is better than clever.
- Errors are values.
- Don't just check errors, handle them gracefully.



* Show me some code!

* Hello, 世界

.play code/1.go



* Basics
* Packages

Todos los programas se componen de paquetes.

Para utilizarlos solamente se necesita importarlos.

.play code/packages.go


* Exported Names

.play code/expNames1.go

Un nombre se exporta si y solo si empieza por mayúscula.

.play code/expNames2.go


* Functions

.play code/functions1.go

* Functions with multiple results

.play code/functions2.go

Se puede evitar el tipo de los argumentos si más de uno tienen el mismo.
.code code/functions3.go

* Variables

"var" es la palabra usada para declarar variables.
.code code/variables1.go

Dentro de las funciones se puede utilizar una abreviación si se quiere declarar e inicializar a la vez.
.code code/variables2.go

Las variables pueden tener diferentes tipos, algunos de estos son:
.code code/variables3.go

Las variables sin valor inicial tienen estos valores:
.code code/variables4.go

* Más sobre  variables

Conversión de tipos
.play code/variables5.go

Las constantes se declaran como las variables pero con la palabra const.

No se puede utilizar la abreviación :=
.code code/variables6.go


* Controladores de flujo

For es el único tipo de bucle

.play code/for.go


* Controladores de flujo

If

.play code/if1.go

* If puede recibir una declaración

.play code/if2.go

* Cómo podríamos mejorar esto con Go? 
.code code/switch.go

* Increíble!
.play code/switch2.go

* Arrays and Slices

.play code/arrays.go

* Gorutines and Defer

.play code/gorutines.go

* Channels

.play code/channels.go


* Más ejemplos



* Servidor HTTP
.link https://golang.org/pkg/net/http/ Los ejemplos de net/http de Go

.play code/example1.go



* Aplicar métodos a punteros nil
.link https://www.youtube.com/watch?v=ynoY2xz-F8s Understanding nil, Francesc Campoy

.code code/example2.go



* Aplicar métodos a punteros nil

.play code/example3.go



* Tipos recursivos
.link https://www.youtube.com/watch?v=WIxQ-KvzwpM Lexical Scanning in Go, Rob Pike

.code code/example4.go



* Tipos recursivos

.play code/example5.go



* Consumo de memoria

.code code/MemoryTest.java



* Consumo de memoria

.play code/example6.go



* Nexus

.play code/example7.go


