Go
(Otra) Introducción
29 Sep 2016

Carles Aragón
Oriol Flors

* Porqué Go?
(de .link https://www.youtube.com/watch?v=uQgWP7zM6mU Another Golang at Language Design, Rob Pike)

  foo::Foo *myFoo = new foo::Foo(foo::FOO_INIT)

Reacció a això: inventar altres llenguatges (Python, Haskell...) que funcionen diferent. 
Confusió entre dinàmic i fàcil, static i difícil
Llenguatges antics i no adaptats a multicore programming, tarden molt a compilar, binaris enormes...

Els dinàmics eviten verbositat, no han desperar al compilador, però son lents i no son type-safe.

* Qué pretende Go?
(de .link https://talks.golang.org/2014/gocon-tokyo.slide Go: 90% Perfect, 100% of the time, Brad Fitzpatrick)

Go pretèn tindre el bo, evitar el dolent, i adaptar-se a la infraestructura moderna.

.image images/languages_comparison.png


* Go proverbs
(de .link https://www.youtube.com/watch?v=PAAkCSZUG1c&list=PLXwUmDicO5FhvkJWPO3y8oMIyWdpbie2A&index=5 Go Proverbs, Rob Pike)

- Don't communicate by sharing memory, share memory by communicating.
- Concurrency is not parallelism.
- Channels orchestrate; mutexes serialize.
- The bigger the interface, the weaker the abstraction.
- Make the zero value useful.
- interface{} says nothing.
- Gofmt's style is no one's favorite, yet gofmt is everyone's favorite.
- A little copying is better than a little dependency.
- Syscall must always be guarded with build tags.
- Cgo must always be guarded with build tags.
- Cgo is not Go.
- With the unsafe package there are no guarantees.
- Clear is better than clever.
- Reflection is never clear.
- Errors are values.
- Don't just check errors, handle them gracefully.
- Design the architecture, name the components, document the details.
- Documentation is for users.
- Don't panic.


* Qué es Go?

Llenguatge strongly, staticly typed, compiled language with builtin support for concurrency.

Fa compilacions més ràpides evitant recompilar coses que ja estan compilades (no permet cicles en el import path).

És un llenguatge dissenyat (al principi) per consens: Ken Thompson, Robert Griesemer i Rob Pike)

(de .link https://www.youtube.com/watch?v=rFejpH_tAHM Simplicity is Complicated, Rob Pike)
.link https://talks.golang.org/2015/simplicity-is-complicated.slide Simplicity is Complicated, Rob Pike


* Hello, 世界

.play code/1.go



* Garbage Collector

.image images/gc1.png



* Garbage Collector 2

.image images/gc2.png 500 _

(de .link https://www.youtube.com/watch?v=WIxQ-KvzwpM Lexical Scanning in Go, Rob Pike)


* Basics
* Packages

Every program is made of packages.

In order to use them we just need to import them.

.play code/packages.go


* Exported Names

A name is only exported if it begins with a capital letter!

.play code/expNames1.go
.play code/expNames2.go


* Functions

.code code/functions1.go

* Functions with multiple results

.play code/functions2.go

We can avoid the type of some arguments if they have the same type.
.code code/functions3.go

* Variables

"var" is the statment that declares variables.
.code code/variables1.go

Inside a function we can use the short assigment
.code code/variables2.go

Variables can have different types, some of them are:
.code code/variables3.go

Variables without initial value have these values:
.code code/variables4.go

* More about variables

Type conversion
.play code/variables5.go

Constants are declared as variables with "const" statement.

Can not use short assigment :=
.code code/variables6.go
